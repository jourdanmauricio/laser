---
import SocialNetworks from '../SocialNetworks/SocialNetworks.astro';
import { Icon } from 'astro-icon';

const BACKEND = import.meta.env.BACKEND;
const URL = import.meta.env.URL;
---

<footer class="w-full bg-slate-950 text-white">
  <div
    class="flex flex-col lg:flex-row lg:justify-around justify-center items-start p-10 gap-8"
  >
    <div
      class="place-self-center text-center w-full lg:w-1/5 flex flex-col justify-center items-center gap-4"
    >
      <a href="#">
        <h3
          class="text-slate-200 text-3xl font-semibold font-dancing -rotate-12"
        >
          Doctora Laura Rodriguez
        </h3>
      </a>
      <Icon
        name="logo"
        class="w-16 h-16 text-primary"
      />
    </div>
    <div
      class="flex flex-col justify-center items-center gap-2 w-full lg:w-2/5"
    >
      <h2 class="pb-4 text-center text-xl font-semibold">SOBRE NOSOTROS</h2>
      <p>
        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quas, eos.
      </p>
      <p>
        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quas, eos.
      </p>
    </div>

    <div class="flex flex-col items-center gap-4 w-full lg:w-2/5">
      <div class="">
        <h2 class="pb-4 text-center text-xl font-semibold">SIGUENOS</h2>
        <SocialNetworks />
      </div>

      <div
        id="response-subscriber-form"
        class="flex-col justify-center items-center h-full hidden"
      >
        <p
          id="form-subscriber-result"
          class="text-xl font-semibold"
        >
          Ya estas suscripto
        </p>
        <p
          id="message-subscriber"
          class="mt-4"
        >
          En breve recibirás nuestro boletín.
        </p>
        <p>Muchas gracias.</p>
      </div>

      <form
        class="flex gap-2"
        id="subscriber-form"
        novalidate
      >
        <div class="flex flex-col w-2/3">
          <input
            id="email"
            name="email"
            class="p-2 border border-slate-900 outline-none w-full text-slate-900"
            type="email"
            data-pattern="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
            data-error="Email inválido"
            placeholder="example@email.com"
            required
          />
          <span class="text-sm text-red-500 transition-opacity opacity-0"
            >Error</span
          >
        </div>

        <button
          type="submit"
          class="bg-primary border-none py-2 px-4 rounded w-32 h-10 cursor-pointer ml-auto text-white text-lg flex items-center justify-center"
          ><span id="subscribe-btn">Suscribete</span></button
        >
      </form>
    </div>
  </div>

  <div class="text-center p-1 bg-slate-900">
    <small>&copy; 2023 <b>LaserMed</b> - Todos los derechos reservados.</small>
  </div>
</footer>

<style>
  .spinner-btn {
    pointer-events: none;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-top-color: #fff;
    border-radius: 50%;
    animation: spinner 1s ease-out infinite;
  }

  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script define:vars={{ BACKEND, URL }}>
const subscribeBtn = document.getElementById( 'subscribe-btn' );

const subscriberForm = document.getElementById( 'subscriber-form' );
subscriberForm.addEventListener( 'submit', ( e ) => sendform( e ) );

async function sendform( e ) {
  e.preventDefault();
  console.log( 'submit' );
  const fieldsToValidate = document
    .getElementById( e.target.id )
    .querySelectorAll( '[required], [data-pattern]' );

  console.log( 'fieldsToValidate', fieldsToValidate );

  let error = false;
  for ( let i = 0; i < fieldsToValidate.length; i++ ) {
    const field = fieldsToValidate[i];
    const spanError = field.nextSibling;
    spanError.classList.add( 'opacity-0' );
    if ( field.hasAttribute( 'required' ) && field.value.trim().length === 0 ) {
      spanError.textContent = 'Requerido';
      spanError.classList.remove( 'opacity-0' );
      spanError.classList.add( 'opacity-1' );
      error = true;
    }
    if ( field.value.trim().length > 0 && field.hasAttribute( 'data-pattern' ) ) {
      let regex = new RegExp( field.dataset.pattern );
      if ( regex.exec( field.value ) === null ) {
        spanError.textContent = field.dataset.error;
        spanError.classList.remove( 'opacity-0' );
        spanError.classList.add( 'opacity-1' );
        error = true;
      }
    }
  }
  if ( error ) return error;

  const data = Object.fromEntries( new FormData( e.target ) );
  data.url = URL;
  const responseSubscriberForm = document.getElementById(
    'response-subscriber-form'
  );
  const formSubsciberResult = document.getElementById(
    'form-subscriber-result'
  );
  const messageSubscriber = document.getElementById( 'message-subscriber' );

  try {
    subscribeBtn.innerHTML = '<div></div>';
    subscribeBtn.classList.add( 'spinner-btn' );
    const response = await fetch( `${BACKEND}/subscribers`, {
      method: 'POST',
      body: JSON.stringify( data ),
      headers: { 'Content-Type': 'application/json' },
    } );

    if ( response.ok === false ) throw 'Error';
  } catch ( err ) {
    formSubsciberResult.textContent = 'Error realizando la suscripción';
    messageSubscriber.textContent = 'Intentelo nuevamente.';
  } finally {
    responseSubscriberForm.classList.add( 'flex' );
    responseSubscriberForm.classList.remove( 'hidden' );
    subscriberForm.classList.add( 'hidden' );
    subscriberForm.classList.remove( 'flex' );
  }
}
</script>
