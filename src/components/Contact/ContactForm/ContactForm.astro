---
const BACKEND = import.meta.env.BACKEND;
const URL = import.meta.env.URL;
---

<div class="bg-slate-100 shadow-lg px-4 pb-4 w-full md:w-1/2">
  <div
    id="response-contact-form"
    class="flex-col justify-center items-center h-full hidden"
  >
    <p
      id="form-contact-result"
      class="text-xl font-semibold"
    >
      Mensaje enviado!
    </p>
    <p
      id="contact-message"
      class="mt-4"
    >
      En breve nos pondremos en contacto.
    </p>
    <p>Muchas gracias.</p>
  </div>

  <form
    id="contact-form"
    class="flex flex-col gap-2 mt-4"
    novalidate
  >
    <div class="flex flex-col w-full">
      <label
        class="text-sm text-blue-500"
        for="name"
        >Nombre
      </label>
      <input
        id="name"
        name="name"
        class="p-2 border border-slate-900 outline-none"
        type="text"
        placeholder="Nombre y apellido"
        data-pattern="^[a-zA-Z0-9 ÑñÁÉÍÓÚáéíóú]{3,100}$"
        data-error="Nombre inválido"
        required
      />
      <span class="text-sm text-red-500 transition-opacity opacity-0"
        >Error</span
      >
    </div>

    <div class="flex flex-col w-full">
      <label
        class="text-sm text-blue-500"
        for="email"
        >Email
      </label>
      <input
        id="email"
        name="email"
        class="p-2 border border-slate-900 outline-none"
        type="email"
        data-pattern="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
        data-error="Email inválido"
        placeholder="example@email.com"
      />
      <span class="text-sm text-red-500 transition-opacity opacity-0"
        >Error</span
      >
    </div>

    <div class="flex flex-col w-full">
      <label
        class="text-sm text-blue-500"
        for="phone"
        >Teléfono
      </label>
      <input
        id="phone"
        name="phone"
        class="p-2 border border-slate-900 outline-none"
        type="text"
        data-pattern="^[0-9 ()]{7,15}$"
        data-error="Ingrese números o espacios"
        placeholder="(0999) 9999 9999"
        required
      />
      <span class="text-sm text-red-500 transition-opacity opacity-0"
        >Error</span
      >
    </div>

    <div class="flex flex-col w-full">
      <label
        class="text-sm text-blue-500"
        for="comment"
        >Mensaje
      </label>
      <textarea
        id="comment"
        name="comment"
        rows="4"
        class="p-2 border border-slate-900 outline-none"
        data-pattern="^[a-zA-Z0-9 ÑñÁÉÍÓÚáéíóú]{3,255}$"
        data-error="Ingrese letras o números"
        placeholder="Mensaje"
        required
      ></textarea>
      <span class="text-sm text-red-500 transition-opacity opacity-0"
        >Error</span
      >
    </div>

    <button
      class="bg-primary border-none py-2 px-4 rounded w-32 h-10 cursor-pointer ml-auto text-white text-lg flex items-center justify-center"
      type="submit"
    >
      <span id="send-btn">Enviar</span>
    </button>
  </form>

  <style>
    .spinner-btn {
      pointer-events: none;
      width: 20px;
      height: 20px;
      border: 2px solid rgba(0, 0, 0, 0.1);
      border-top-color: #fff;
      border-radius: 50%;
      animation: spinner 1s ease-out infinite;
    }

    @keyframes spinner {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  </style>

  <script define:vars={{ BACKEND, URL }}>
    const sendBtn = document.getElementById('send-btn');

    const contactForm = document.getElementById('contact-form');
    contactForm.addEventListener('submit', (e) => sendform(e));

    async function sendform(e) {
      e.preventDefault();
      const fieldsToValidate = document
        .getElementById(e.target.id)
        .querySelectorAll('[required], [data-pattern]');

      let error = false;
      for (let i = 0; i < fieldsToValidate.length; i++) {
        const field = fieldsToValidate[i];
        const spanError = field.nextSibling;
        spanError.classList.add('opacity-0');
        if (field.hasAttribute('required') && field.value.trim().length === 0) {
          spanError.textContent = 'Requerido';
          spanError.classList.remove('opacity-0');
          spanError.classList.add('opacity-1');
          error = true;
        }
        if (
          field.value.trim().length > 0 &&
          field.hasAttribute('data-pattern')
        ) {
          let regex = new RegExp(field.dataset.pattern);
          if (regex.exec(field.value) === null) {
            spanError.textContent = field.dataset.error;
            spanError.classList.remove('opacity-0');
            spanError.classList.add('opacity-1');
            error = true;
          }
        }
      }
      if (error) return error;

      const data = Object.fromEntries(new FormData(e.target));
      data.url = URL;
      const responseContactForm = document.getElementById(
        'response-contact-form'
      );
      const formContactResult = document.getElementById('form-contact-result');
      const contactMessage = document.getElementById('contact-message');

      try {
        sendBtn.innerHTML = '<div></div>';
        sendBtn.classList.add('spinner-btn');
        const response = await fetch(`${BACKEND}/contacts`, {
          method: 'POST',
          body: JSON.stringify(data),
          headers: { 'Content-Type': 'application/json' },
        });

        if (response.ok === false) throw 'Error';
      } catch (err) {
        formContactResult.textContent = 'Error enviando el mensaje';
        contactMessage.textContent = 'Intentelo nuevamente.';
      } finally {
        responseContactForm.classList.add('flex');
        responseContactForm.classList.remove('hidden');
        contactForm.classList.add('hidden');
        contactForm.classList.remove('flex');
      }
    }
  </script>
</div>
